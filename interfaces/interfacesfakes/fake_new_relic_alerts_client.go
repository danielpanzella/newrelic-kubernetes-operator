// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"sync"

	"github.com/newrelic/newrelic-client-go/pkg/alerts"

	"github.com/newrelic/newrelic-kubernetes-operator/interfaces"
)

type FakeNewRelicAlertsClient struct {
	CreateNrqlConditionStaticMutationStub        func(int, int, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)
	createNrqlConditionStaticMutationMutex       sync.RWMutex
	createNrqlConditionStaticMutationArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 alerts.NrqlConditionInput
	}
	createNrqlConditionStaticMutationReturns struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	createNrqlConditionStaticMutationReturnsOnCall map[int]struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	CreatePolicyStub        func(alerts.Policy) (*alerts.Policy, error)
	createPolicyMutex       sync.RWMutex
	createPolicyArgsForCall []struct {
		arg1 alerts.Policy
	}
	createPolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	createPolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	DeleteNrqlConditionStub        func(int) (*alerts.NrqlCondition, error)
	deleteNrqlConditionMutex       sync.RWMutex
	deleteNrqlConditionArgsForCall []struct {
		arg1 int
	}
	deleteNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	deleteNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	DeletePolicyStub        func(int) (*alerts.Policy, error)
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		arg1 int
	}
	deletePolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	deletePolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	GetPolicyStub        func(int) (*alerts.Policy, error)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
		arg1 int
	}
	getPolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	ListPoliciesStub        func(*alerts.ListPoliciesParams) ([]alerts.Policy, error)
	listPoliciesMutex       sync.RWMutex
	listPoliciesArgsForCall []struct {
		arg1 *alerts.ListPoliciesParams
	}
	listPoliciesReturns struct {
		result1 []alerts.Policy
		result2 error
	}
	listPoliciesReturnsOnCall map[int]struct {
		result1 []alerts.Policy
		result2 error
	}
	SearchNrqlConditionsQueryStub        func(int, alerts.NrqlConditionsSearchCriteria) ([]*alerts.NrqlAlertCondition, error)
	searchNrqlConditionsQueryMutex       sync.RWMutex
	searchNrqlConditionsQueryArgsForCall []struct {
		arg1 int
		arg2 alerts.NrqlConditionsSearchCriteria
	}
	searchNrqlConditionsQueryReturns struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}
	searchNrqlConditionsQueryReturnsOnCall map[int]struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}
	UpdateNrqlConditionStaticMutationStub        func(int, int, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)
	updateNrqlConditionStaticMutationMutex       sync.RWMutex
	updateNrqlConditionStaticMutationArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 alerts.NrqlConditionInput
	}
	updateNrqlConditionStaticMutationReturns struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	updateNrqlConditionStaticMutationReturnsOnCall map[int]struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}
	UpdatePolicyStub        func(alerts.Policy) (*alerts.Policy, error)
	updatePolicyMutex       sync.RWMutex
	updatePolicyArgsForCall []struct {
		arg1 alerts.Policy
	}
	updatePolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	updatePolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutation(arg1 int, arg2 int, arg3 alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	ret, specificReturn := fake.createNrqlConditionStaticMutationReturnsOnCall[len(fake.createNrqlConditionStaticMutationArgsForCall)]
	fake.createNrqlConditionStaticMutationArgsForCall = append(fake.createNrqlConditionStaticMutationArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 alerts.NrqlConditionInput
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateNrqlConditionStaticMutation", []interface{}{arg1, arg2, arg3})
	fake.createNrqlConditionStaticMutationMutex.Unlock()
	if fake.CreateNrqlConditionStaticMutationStub != nil {
		return fake.CreateNrqlConditionStaticMutationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNrqlConditionStaticMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationCallCount() int {
	fake.createNrqlConditionStaticMutationMutex.RLock()
	defer fake.createNrqlConditionStaticMutationMutex.RUnlock()
	return len(fake.createNrqlConditionStaticMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationCalls(stub func(int, int, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	defer fake.createNrqlConditionStaticMutationMutex.Unlock()
	fake.CreateNrqlConditionStaticMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationArgsForCall(i int) (int, int, alerts.NrqlConditionInput) {
	fake.createNrqlConditionStaticMutationMutex.RLock()
	defer fake.createNrqlConditionStaticMutationMutex.RUnlock()
	argsForCall := fake.createNrqlConditionStaticMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationReturns(result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	defer fake.createNrqlConditionStaticMutationMutex.Unlock()
	fake.CreateNrqlConditionStaticMutationStub = nil
	fake.createNrqlConditionStaticMutationReturns = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionStaticMutationReturnsOnCall(i int, result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.createNrqlConditionStaticMutationMutex.Lock()
	defer fake.createNrqlConditionStaticMutationMutex.Unlock()
	fake.CreateNrqlConditionStaticMutationStub = nil
	if fake.createNrqlConditionStaticMutationReturnsOnCall == nil {
		fake.createNrqlConditionStaticMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlAlertCondition
			result2 error
		})
	}
	fake.createNrqlConditionStaticMutationReturnsOnCall[i] = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicy(arg1 alerts.Policy) (*alerts.Policy, error) {
	fake.createPolicyMutex.Lock()
	ret, specificReturn := fake.createPolicyReturnsOnCall[len(fake.createPolicyArgsForCall)]
	fake.createPolicyArgsForCall = append(fake.createPolicyArgsForCall, struct {
		arg1 alerts.Policy
	}{arg1})
	fake.recordInvocation("CreatePolicy", []interface{}{arg1})
	fake.createPolicyMutex.Unlock()
	if fake.CreatePolicyStub != nil {
		return fake.CreatePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyCallCount() int {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	return len(fake.createPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyCalls(stub func(alerts.Policy) (*alerts.Policy, error)) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyArgsForCall(i int) alerts.Policy {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	argsForCall := fake.createPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	fake.createPolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	if fake.createPolicyReturnsOnCall == nil {
		fake.createPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.createPolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlCondition(arg1 int) (*alerts.NrqlCondition, error) {
	fake.deleteNrqlConditionMutex.Lock()
	ret, specificReturn := fake.deleteNrqlConditionReturnsOnCall[len(fake.deleteNrqlConditionArgsForCall)]
	fake.deleteNrqlConditionArgsForCall = append(fake.deleteNrqlConditionArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteNrqlCondition", []interface{}{arg1})
	fake.deleteNrqlConditionMutex.Unlock()
	if fake.DeleteNrqlConditionStub != nil {
		return fake.DeleteNrqlConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCallCount() int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	return len(fake.deleteNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCalls(stub func(int) (*alerts.NrqlCondition, error)) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionArgsForCall(i int) int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	argsForCall := fake.deleteNrqlConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	fake.deleteNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	if fake.deleteNrqlConditionReturnsOnCall == nil {
		fake.deleteNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.deleteNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicy(arg1 int) (*alerts.Policy, error) {
	fake.deletePolicyMutex.Lock()
	ret, specificReturn := fake.deletePolicyReturnsOnCall[len(fake.deletePolicyArgsForCall)]
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeletePolicy", []interface{}{arg1})
	fake.deletePolicyMutex.Unlock()
	if fake.DeletePolicyStub != nil {
		return fake.DeletePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyCalls(stub func(int) (*alerts.Policy, error)) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyArgsForCall(i int) int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	argsForCall := fake.deletePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	if fake.deletePolicyReturnsOnCall == nil {
		fake.deletePolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.deletePolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicy(arg1 int) (*alerts.Policy, error) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetPolicy", []interface{}{arg1})
	fake.getPolicyMutex.Unlock()
	if fake.GetPolicyStub != nil {
		return fake.GetPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCalls(stub func(int) (*alerts.Policy, error)) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) GetPolicyArgsForCall(i int) int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	argsForCall := fake.getPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListPolicies(arg1 *alerts.ListPoliciesParams) ([]alerts.Policy, error) {
	fake.listPoliciesMutex.Lock()
	ret, specificReturn := fake.listPoliciesReturnsOnCall[len(fake.listPoliciesArgsForCall)]
	fake.listPoliciesArgsForCall = append(fake.listPoliciesArgsForCall, struct {
		arg1 *alerts.ListPoliciesParams
	}{arg1})
	fake.recordInvocation("ListPolicies", []interface{}{arg1})
	fake.listPoliciesMutex.Unlock()
	if fake.ListPoliciesStub != nil {
		return fake.ListPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesCallCount() int {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	return len(fake.listPoliciesArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesCalls(stub func(*alerts.ListPoliciesParams) ([]alerts.Policy, error)) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesArgsForCall(i int) *alerts.ListPoliciesParams {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	argsForCall := fake.listPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesReturns(result1 []alerts.Policy, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	fake.listPoliciesReturns = struct {
		result1 []alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesReturnsOnCall(i int, result1 []alerts.Policy, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	if fake.listPoliciesReturnsOnCall == nil {
		fake.listPoliciesReturnsOnCall = make(map[int]struct {
			result1 []alerts.Policy
			result2 error
		})
	}
	fake.listPoliciesReturnsOnCall[i] = struct {
		result1 []alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQuery(arg1 int, arg2 alerts.NrqlConditionsSearchCriteria) ([]*alerts.NrqlAlertCondition, error) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	ret, specificReturn := fake.searchNrqlConditionsQueryReturnsOnCall[len(fake.searchNrqlConditionsQueryArgsForCall)]
	fake.searchNrqlConditionsQueryArgsForCall = append(fake.searchNrqlConditionsQueryArgsForCall, struct {
		arg1 int
		arg2 alerts.NrqlConditionsSearchCriteria
	}{arg1, arg2})
	fake.recordInvocation("SearchNrqlConditionsQuery", []interface{}{arg1, arg2})
	fake.searchNrqlConditionsQueryMutex.Unlock()
	if fake.SearchNrqlConditionsQueryStub != nil {
		return fake.SearchNrqlConditionsQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchNrqlConditionsQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryCallCount() int {
	fake.searchNrqlConditionsQueryMutex.RLock()
	defer fake.searchNrqlConditionsQueryMutex.RUnlock()
	return len(fake.searchNrqlConditionsQueryArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryCalls(stub func(int, alerts.NrqlConditionsSearchCriteria) ([]*alerts.NrqlAlertCondition, error)) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	defer fake.searchNrqlConditionsQueryMutex.Unlock()
	fake.SearchNrqlConditionsQueryStub = stub
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryArgsForCall(i int) (int, alerts.NrqlConditionsSearchCriteria) {
	fake.searchNrqlConditionsQueryMutex.RLock()
	defer fake.searchNrqlConditionsQueryMutex.RUnlock()
	argsForCall := fake.searchNrqlConditionsQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryReturns(result1 []*alerts.NrqlAlertCondition, result2 error) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	defer fake.searchNrqlConditionsQueryMutex.Unlock()
	fake.SearchNrqlConditionsQueryStub = nil
	fake.searchNrqlConditionsQueryReturns = struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) SearchNrqlConditionsQueryReturnsOnCall(i int, result1 []*alerts.NrqlAlertCondition, result2 error) {
	fake.searchNrqlConditionsQueryMutex.Lock()
	defer fake.searchNrqlConditionsQueryMutex.Unlock()
	fake.SearchNrqlConditionsQueryStub = nil
	if fake.searchNrqlConditionsQueryReturnsOnCall == nil {
		fake.searchNrqlConditionsQueryReturnsOnCall = make(map[int]struct {
			result1 []*alerts.NrqlAlertCondition
			result2 error
		})
	}
	fake.searchNrqlConditionsQueryReturnsOnCall[i] = struct {
		result1 []*alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutation(arg1 int, arg2 int, arg3 alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	ret, specificReturn := fake.updateNrqlConditionStaticMutationReturnsOnCall[len(fake.updateNrqlConditionStaticMutationArgsForCall)]
	fake.updateNrqlConditionStaticMutationArgsForCall = append(fake.updateNrqlConditionStaticMutationArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 alerts.NrqlConditionInput
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateNrqlConditionStaticMutation", []interface{}{arg1, arg2, arg3})
	fake.updateNrqlConditionStaticMutationMutex.Unlock()
	if fake.UpdateNrqlConditionStaticMutationStub != nil {
		return fake.UpdateNrqlConditionStaticMutationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateNrqlConditionStaticMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationCallCount() int {
	fake.updateNrqlConditionStaticMutationMutex.RLock()
	defer fake.updateNrqlConditionStaticMutationMutex.RUnlock()
	return len(fake.updateNrqlConditionStaticMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationCalls(stub func(int, int, alerts.NrqlConditionInput) (*alerts.NrqlAlertCondition, error)) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	defer fake.updateNrqlConditionStaticMutationMutex.Unlock()
	fake.UpdateNrqlConditionStaticMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationArgsForCall(i int) (int, int, alerts.NrqlConditionInput) {
	fake.updateNrqlConditionStaticMutationMutex.RLock()
	defer fake.updateNrqlConditionStaticMutationMutex.RUnlock()
	argsForCall := fake.updateNrqlConditionStaticMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationReturns(result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	defer fake.updateNrqlConditionStaticMutationMutex.Unlock()
	fake.UpdateNrqlConditionStaticMutationStub = nil
	fake.updateNrqlConditionStaticMutationReturns = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionStaticMutationReturnsOnCall(i int, result1 *alerts.NrqlAlertCondition, result2 error) {
	fake.updateNrqlConditionStaticMutationMutex.Lock()
	defer fake.updateNrqlConditionStaticMutationMutex.Unlock()
	fake.UpdateNrqlConditionStaticMutationStub = nil
	if fake.updateNrqlConditionStaticMutationReturnsOnCall == nil {
		fake.updateNrqlConditionStaticMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlAlertCondition
			result2 error
		})
	}
	fake.updateNrqlConditionStaticMutationReturnsOnCall[i] = struct {
		result1 *alerts.NrqlAlertCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicy(arg1 alerts.Policy) (*alerts.Policy, error) {
	fake.updatePolicyMutex.Lock()
	ret, specificReturn := fake.updatePolicyReturnsOnCall[len(fake.updatePolicyArgsForCall)]
	fake.updatePolicyArgsForCall = append(fake.updatePolicyArgsForCall, struct {
		arg1 alerts.Policy
	}{arg1})
	fake.recordInvocation("UpdatePolicy", []interface{}{arg1})
	fake.updatePolicyMutex.Unlock()
	if fake.UpdatePolicyStub != nil {
		return fake.UpdatePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyCallCount() int {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	return len(fake.updatePolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyCalls(stub func(alerts.Policy) (*alerts.Policy, error)) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyArgsForCall(i int) alerts.Policy {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	argsForCall := fake.updatePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	fake.updatePolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	if fake.updatePolicyReturnsOnCall == nil {
		fake.updatePolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.updatePolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createNrqlConditionStaticMutationMutex.RLock()
	defer fake.createNrqlConditionStaticMutationMutex.RUnlock()
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	fake.searchNrqlConditionsQueryMutex.RLock()
	defer fake.searchNrqlConditionsQueryMutex.RUnlock()
	fake.updateNrqlConditionStaticMutationMutex.RLock()
	defer fake.updateNrqlConditionStaticMutationMutex.RUnlock()
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNewRelicAlertsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.NewRelicAlertsClient = new(FakeNewRelicAlertsClient)
